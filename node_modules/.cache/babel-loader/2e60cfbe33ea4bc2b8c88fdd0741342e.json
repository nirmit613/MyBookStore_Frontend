{"ast":null,"code":"import cartService from \"../service/cart.service\";\nimport { Role, RoutePaths } from \"./enum\";\nexport default class Shared {}\nShared.messages = {\n  USER_DELETE: \"Are you sure you want to delete this user?\",\n  UPDATED_SUCCESS: \"Record updated successfully\",\n  UPDATED_FAIL: \"Record cannot be updated\",\n  DELETE_SUCCESS: \"Record deleted successfully\",\n  DELETE_FAIL: \"Record cannot be deleted\",\n  ORDER_SUCCESS: \"Your order is successfully placed\"\n};\nShared.LocalStorageKeys = {\n  USER: \"user\"\n};\nShared.NavigationItems = [{\n  name: \"Users\",\n  route: RoutePaths.User,\n  access: [Role.Admin]\n}, {\n  name: \"Categories\",\n  route: RoutePaths.Category,\n  access: [Role.Admin]\n}, {\n  name: \"Books\",\n  route: RoutePaths.Book,\n  access: [Role.Admin, Role.Seller]\n}, {\n  name: \"Update Profile\",\n  route: RoutePaths.UpdateProfile,\n  access: [Role.Admin, Role.Buyer, Role.Seller]\n}];\n\nShared.hasAccess = (pathname, user) => {\n  const navItem = Shared.NavigationItems.find(navItem => pathname.includes(navItem.route));\n\n  if (navItem) {\n    return !navItem.access || !!(navItem.access && navItem.access.includes(user.roleId));\n  }\n\n  return true;\n};\n\nShared.addToCart = (book, id) => {\n  return cartService.add({\n    userId: id,\n    bookId: book.id,\n    quantity: 1\n  }).then(res => {\n    return {\n      error: false,\n      message: \"Item added in cart\"\n    };\n  }).catch(e => {\n    if (e.status === 500) return {\n      error: true,\n      message: \"Item already in the cart\"\n    };else return {\n      error: true,\n      message: \"something went wrong\"\n    };\n  });\n};","map":{"version":3,"sources":["E:/7th Semester/Internship2/TatvaSoft/MyBookStore_Tatvasoft/src/utils/shared.ts"],"names":["cartService","Role","RoutePaths","Shared","messages","USER_DELETE","UPDATED_SUCCESS","UPDATED_FAIL","DELETE_SUCCESS","DELETE_FAIL","ORDER_SUCCESS","LocalStorageKeys","USER","NavigationItems","name","route","User","access","Admin","Category","Book","Seller","UpdateProfile","Buyer","hasAccess","pathname","user","navItem","find","includes","roleId","addToCart","book","id","add","userId","bookId","quantity","then","res","error","message","catch","e","status"],"mappings":"AAEA,OAAOA,WAAP,MAAwB,yBAAxB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,QAAjC;AAEA,eAAe,MAAMC,MAAN,CAAa;AAAPA,M,CACNC,Q,GAAW;AACxBC,EAAAA,WAAW,EAAE,4CADW;AAExBC,EAAAA,eAAe,EAAE,6BAFO;AAGxBC,EAAAA,YAAY,EAAE,0BAHU;AAIxBC,EAAAA,cAAc,EAAE,6BAJQ;AAKxBC,EAAAA,WAAW,EAAE,0BALW;AAMxBC,EAAAA,aAAa,EAAE;AANS,C;AADLP,M,CAUNQ,gB,GAAmB;AAChCC,EAAAA,IAAI,EAAE;AAD0B,C;AAVbT,M,CAcNU,e,GAAkB,CAC/B;AACCC,EAAAA,IAAI,EAAE,OADP;AAECC,EAAAA,KAAK,EAAEb,UAAU,CAACc,IAFnB;AAGCC,EAAAA,MAAM,EAAE,CAAChB,IAAI,CAACiB,KAAN;AAHT,CAD+B,EAM/B;AACCJ,EAAAA,IAAI,EAAE,YADP;AAECC,EAAAA,KAAK,EAAEb,UAAU,CAACiB,QAFnB;AAGCF,EAAAA,MAAM,EAAE,CAAChB,IAAI,CAACiB,KAAN;AAHT,CAN+B,EAW/B;AACCJ,EAAAA,IAAI,EAAE,OADP;AAECC,EAAAA,KAAK,EAAEb,UAAU,CAACkB,IAFnB;AAGCH,EAAAA,MAAM,EAAE,CAAChB,IAAI,CAACiB,KAAN,EAAajB,IAAI,CAACoB,MAAlB;AAHT,CAX+B,EAgB/B;AACCP,EAAAA,IAAI,EAAE,gBADP;AAECC,EAAAA,KAAK,EAAEb,UAAU,CAACoB,aAFnB;AAGCL,EAAAA,MAAM,EAAE,CAAChB,IAAI,CAACiB,KAAN,EAAajB,IAAI,CAACsB,KAAlB,EAAyBtB,IAAI,CAACoB,MAA9B;AAHT,CAhB+B,C;;AAdZlB,M,CAqCNqB,S,GAAY,CAACC,QAAD,EAAmBC,IAAnB,KAAgD;AACzE,QAAMC,OAAO,GAAGxB,MAAM,CAACU,eAAP,CAAuBe,IAAvB,CAA6BD,OAAD,IAC3CF,QAAQ,CAACI,QAAT,CAAkBF,OAAO,CAACZ,KAA1B,CADe,CAAhB;;AAGA,MAAIY,OAAJ,EAAa;AACZ,WACC,CAACA,OAAO,CAACV,MAAT,IACA,CAAC,EAAEU,OAAO,CAACV,MAAR,IAAkBU,OAAO,CAACV,MAAR,CAAeY,QAAf,CAAwBH,IAAI,CAACI,MAA7B,CAApB,CAFF;AAIA;;AACD,SAAO,IAAP;AACA,C;;AAhDmB3B,M,CAiDN4B,S,GAAY,CACzBC,IADyB,EAEzBC,EAFyB,KAGyB;AAClD,SAAOjC,WAAW,CAChBkC,GADK,CACD;AACJC,IAAAA,MAAM,EAAEF,EADJ;AAEJG,IAAAA,MAAM,EAAEJ,IAAI,CAACC,EAFT;AAGJI,IAAAA,QAAQ,EAAE;AAHN,GADC,EAMLC,IANK,CAMCC,GAAD,IAAS;AACd,WAAO;AAAEC,MAAAA,KAAK,EAAE,KAAT;AAAgBC,MAAAA,OAAO,EAAE;AAAzB,KAAP;AACA,GARK,EASLC,KATK,CASEC,CAAD,IAAO;AACb,QAAIA,CAAC,CAACC,MAAF,KAAa,GAAjB,EACC,OAAO;AAAEJ,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,OAAO,EAAE;AAAxB,KAAP,CADD,KAEK,OAAO;AAAED,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,OAAO,EAAE;AAAxB,KAAP;AACL,GAbK,CAAP;AAcA,C","sourcesContent":["import { BookModel } from \"../models/BookModel\";\r\nimport UserModel from \"../models/UserModel\";\r\nimport cartService from \"../service/cart.service\";\r\nimport { Role, RoutePaths } from \"./enum\";\r\n\r\nexport default class Shared {\r\n\tpublic static messages = {\r\n\t\tUSER_DELETE: \"Are you sure you want to delete this user?\",\r\n\t\tUPDATED_SUCCESS: \"Record updated successfully\",\r\n\t\tUPDATED_FAIL: \"Record cannot be updated\",\r\n\t\tDELETE_SUCCESS: \"Record deleted successfully\",\r\n\t\tDELETE_FAIL: \"Record cannot be deleted\",\r\n\t\tORDER_SUCCESS: \"Your order is successfully placed\",\r\n\t};\r\n\r\n\tpublic static LocalStorageKeys = {\r\n\t\tUSER: \"user\",\r\n\t};\r\n\r\n\tpublic static NavigationItems = [\r\n\t\t{\r\n\t\t\tname: \"Users\",\r\n\t\t\troute: RoutePaths.User,\r\n\t\t\taccess: [Role.Admin],\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Categories\",\r\n\t\t\troute: RoutePaths.Category,\r\n\t\t\taccess: [Role.Admin],\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Books\",\r\n\t\t\troute: RoutePaths.Book,\r\n\t\t\taccess: [Role.Admin, Role.Seller],\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Update Profile\",\r\n\t\t\troute: RoutePaths.UpdateProfile,\r\n\t\t\taccess: [Role.Admin, Role.Buyer, Role.Seller],\r\n\t\t},\r\n\t];\r\n\r\n\tpublic static hasAccess = (pathname: string, user: UserModel): boolean => {\r\n\t\tconst navItem = Shared.NavigationItems.find((navItem) =>\r\n\t\t\tpathname.includes(navItem.route)\r\n\t\t);\r\n\t\tif (navItem) {\r\n\t\t\treturn (\r\n\t\t\t\t!navItem.access ||\r\n\t\t\t\t!!(navItem.access && navItem.access.includes(user.roleId))\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\tpublic static addToCart = (\r\n\t\tbook: BookModel,\r\n\t\tid: number\r\n\t): Promise<{ error: boolean; message: string }> => {\r\n\t\treturn cartService\r\n\t\t\t.add({\r\n\t\t\t\tuserId: id,\r\n\t\t\t\tbookId: book.id as number,\r\n\t\t\t\tquantity: 1,\r\n\t\t\t})\r\n\t\t\t.then((res) => {\r\n\t\t\t\treturn { error: false, message: \"Item added in cart\" };\r\n\t\t\t})\r\n\t\t\t.catch((e) => {\r\n\t\t\t\tif (e.status === 500)\r\n\t\t\t\t\treturn { error: true, message: \"Item already in the cart\" };\r\n\t\t\t\telse return { error: true, message: \"something went wrong\" };\r\n\t\t\t});\r\n\t};\r\n}\r\n"]},"metadata":{},"sourceType":"module"}